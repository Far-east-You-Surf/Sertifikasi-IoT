#include <WiFi.h>
#include <PubSubClient.h>
#include "Arduino.h"

const char *ssid = "Faris Yusuf's A55";
const char *password = "pizzahut";

const char *mqtt_server = "mqtt3.thingspeak.com";
const int mqtt_port = 1883;
const char *mqtt_user = "KDgOFR4JCAQ4HRkSFCMRIQ0";
const char *mqtt_clientID = "KDgOFR4JCAQ4HRkSFCMRIQ0";
const char *mqtt_password = "s2D3AizziwJp+6KHsFlqOrLm";
const char *mqtt_topic = "channels/2608335/publish" ;
const char *mqtt_topic_command =  "channels/2608335/subscribe";
long mqttChannelID = 2608335;

const int trigPin = 13;
const int echoPin = 12;
const int brakePin = 35;

const int ledRedPin = 15;
const int ledYellowPin = 2;
const int ledBrake = 34;


WiFiClient espClient;
PubSubClient client(espClient);

// Timer
unsigned long tstartDistance = 0;
const unsigned long intervalDistance = 2000;

unsigned long tstartSend = 0;
const unsigned long intervalSend = 15000;

// Membaca data dari sensor HC-SR04
long duration, distance; 
int brake;

void reconnect()
{
    while (!client.connected())
    {
        Serial.print("Attempting MQTT connection...");
        if (client.connect(mqtt_clientID, mqtt_user, mqtt_password))
        {
            Serial.println("connected");
            client.subscribe(mqtt_topic);
        }
        else
        {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            delay(5000);
        }
    }
}

void mqttCallback(char *topic, byte *payload, unsigned int length)
{
    // Fungsi callback untuk menangani pesan yang diterima dari broker MQTT
    Serial.print("Message arrived [");
    Serial.print(topic);
    Serial.print("] ");
    for (int i = 0; i < length; i++)
    {
        Serial.print((char)payload[i]);
    }
    Serial.println();
}

void setup()
{
    Serial.begin(115200);

    // Setup pin HC-SR04
    pinMode(trigPin, OUTPUT);
    pinMode(echoPin, INPUT);
    pinMode(brakePin, INPUT);

    // Setup pin LED
    pinMode(ledRedPin, OUTPUT);
    pinMode(ledYellowPin, OUTPUT);
    pinMode(ledBrake, OUTPUT);

    // Koneksi Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED)
    {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");

    // Setup MQTT
    client.setServer(mqtt_server, mqtt_port);
    client.setCallback(mqttCallback);

    tstartDistance = millis();
    tstartSend = millis();
}

void loop()
{
    if (!client.connected())
    {
        reconnect();
    }
    client.loop();

    // Membaca data dari sensor HC-SR04
    if(millis() - tstartDistance > intervalDistance)
    {
    
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.034 / 2;

    Serial.print("Jarak kendaraan: ");
    Serial.println(distance);

    // Menyalakan LED Hijau jika ketinggian air normal
    if (distance > 0 && distance < 50)
    {
        digitalWrite(ledRedPin, HIGH);
        digitalWrite(ledYellowPin, LOW);
    }
    else
    {
        digitalWrite(ledRedPin, LOW);
        digitalWrite(ledYellowPin, HIGH);
    }
    tstartDistance = millis();

    if (digitalRead(brakePin))
    {
      digitalWrite(ledBrake, HIGH);
      Serial.print("REM: ");
      Serial.println(brakePin);
    }
    else
    {
      digitalWrite(ledBrake, LOW);
    }
    }

    


    // Kirim data ke MQTT
    if(millis() - tstartSend > intervalSend)
    {
    String payload = "field1=" + String(distance) + "&field2=" + digitalRead(ledYellowPin) + "&field3=" + digitalRead(ledRedPin) + "&status=MQTTPUBLISH";
    if (client.publish(mqtt_topic, payload.c_str()))
    {
        Serial.print("Published: ");
        Serial.println(payload);
    }
    else
    {
        Serial.println("Failed to publish data");
    }
     tstartSend = millis();
    }

    
}








